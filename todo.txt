// 1/17/2022 Fully-Functional Navbar and Sidebar 
    Clean up code
    Add custom utility classes 
    add functionality 
        smooth css animations 
        buttons / links route to different pages or toggles animations
    media queries 
        responsive design 
        mobile-first development 

// 1/18/2022 Routing 
https://github.com/remix-run/react-router/blob/main/docs/getting-started/tutorial.md
https://tailwindcss.com/docs
    install react-router dom 
    routes for: 
        home: 
            landing page of website with a banner image of featured product
            various categories: available now, on sale, coming-soon 
        shop: (first)
            fetch all products from api
            a grid of all the products
            functionality to filter products
            each product will have a card, with the picture of the product 
            the title, price, buy now button, and a add to cart button. 
        watchlist: 
            functionality to add products into list and get notified whenever the 
            product goes on sale or the price dips below a certain amount. 
        contact: 
            a basic contact form for users to input their name, email and a message 
        shopping bag:
            a basic shopping cart functionality 
            ability to add and remove items 
            ability to specifiy the quantity of items

// 1/18/2022 update webscraper
    images are blurry, need to get rid of everything after '?'
    remove data from mongodb Atlas 
    scrape lego.com
    commit and push changes
    re-deploy onto heroku 
    update RapidAPI

// updating state in React
https://www.newline.co/@brookslybrand/common-mistake-with-synchronizing-state-in-react--8ab767b5

// add to bag 
I want the ability for customers to specify the quantity of product they want to purchase, when they click
the add to bag button I want the counter next to the bag icon to reflect the number of product they have 
added. 

total price function 
multiply the quantity by the item price and sum all of those prices. 

load more infinite scrolling functionality 
since I already have built an api that has pagination, all I have to do is trigger a function that will
fetch the data and use the url parameters as variables. When the user scrolls all the way down trigger
fetch data function. When that function is called increment + 1 to the page count parameter and add the 
items into an array. 

const shipping = isShipping ? 0 : 9.99;  
    const newBag = [...bag];
    newBag.push({
        set: 'Shipping',
        images: [shippingPng],
        price: shipping * 100,
        quantity: 1, 
    });

    images: item.images[0].split('?')[0], 

<a href="https://ibb.co/XZnVHpp"><img src="https://i.ibb.co/rGBv9MM/Pngtree-fast-delivery-truck-icon-graphic-4002523.png" alt="Pngtree-fast-delivery-truck-icon-graphic-4002523" border="0"></a><br /><a target='_blank' href='https://imgbb.com/'>upload image</a><br />

add html files and render them when stripe payment is successful or cancelled. 